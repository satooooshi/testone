diff --git a/node_modules/react-native-emoji-selector/index.js b/node_modules/react-native-emoji-selector/index.js
index 0737acd..170d2f0 100644
--- a/node_modules/react-native-emoji-selector/index.js
+++ b/node_modules/react-native-emoji-selector/index.js
@@ -1,4 +1,4 @@
-import React, { Component } from "react";
+import React, {Component} from 'react';
 import {
   View,
   Text,
@@ -8,92 +8,90 @@ import {
   Platform,
   ActivityIndicator,
   AsyncStorage,
-  FlatList
-} from "react-native";
-import emoji from "emoji-datasource";
+  FlatList,
+} from 'react-native';
+import emoji from 'emoji-datasource';
 
 export const Categories = {
   all: {
     symbol: null,
-    name: "All"
+    name: 'All',
   },
   history: {
-    symbol: "🕘",
-    name: "Recently used"
+    symbol: '🕘',
+    name: 'Recently used',
   },
   emotion: {
-    symbol: "😀",
-    name: "Smileys & Emotion"
+    symbol: '😀',
+    name: 'Smileys & Emotion',
   },
   people: {
-    symbol: "🧑",
-    name: "People & Body"
+    symbol: '🧑',
+    name: 'People & Body',
   },
   nature: {
-    symbol: "🦄",
-    name: "Animals & Nature"
+    symbol: '🦄',
+    name: 'Animals & Nature',
   },
   food: {
-    symbol: "🍔",
-    name: "Food & Drink"
+    symbol: '🍔',
+    name: 'Food & Drink',
   },
   activities: {
-    symbol: "⚾️",
-    name: "Activities"
+    symbol: '⚾️',
+    name: 'Activities',
   },
   places: {
-    symbol: "✈️",
-    name: "Travel & Places"
+    symbol: '✈️',
+    name: 'Travel & Places',
   },
   objects: {
-    symbol: "💡",
-    name: "Objects"
+    symbol: '💡',
+    name: 'Objects',
   },
   symbols: {
-    symbol: "🔣",
-    name: "Symbols"
+    symbol: '🔣',
+    name: 'Symbols',
   },
   flags: {
-    symbol: "🏳️‍🌈",
-    name: "Flags"
-  }
+    symbol: '🏳️‍🌈',
+    name: 'Flags',
+  },
 };
 
 const charFromUtf16 = utf16 =>
-  String.fromCodePoint(...utf16.split("-").map(u => "0x" + u));
+  String.fromCodePoint(...utf16.split('-').map(u => '0x' + u));
 export const charFromEmojiObject = obj => charFromUtf16(obj.unified);
-const filteredEmojis = emoji.filter(e => !e["obsoleted_by"]);
+const filteredEmojis = emoji.filter(e => !e['obsoleted_by']);
 const emojiByCategory = category =>
   filteredEmojis.filter(e => e.category === category);
 const sortEmoji = list => list.sort((a, b) => a.sort_order - b.sort_order);
 const categoryKeys = Object.keys(Categories);
 
-const TabBar = ({ theme, activeCategory, onPress, width }) => {
+const TabBar = ({theme, activeCategory, onPress, width}) => {
   const tabSize = width / categoryKeys.length;
 
   return categoryKeys.map(c => {
     const category = Categories[c];
-    if (c !== "all")
+    if (c !== 'all')
       return (
         <TouchableOpacity
           key={category.name}
           onPress={() => onPress(category)}
           style={{
             flex: 1,
-            height: tabSize,
-            borderColor: category === activeCategory ? theme : "#EEEEEE",
+            height: Platform.OS === 'android' ? 40 : tabSize,
+            borderColor: category === activeCategory ? theme : '#EEEEEE',
             borderBottomWidth: 2,
-            alignItems: "center",
-            justifyContent: "center"
-          }}
-        >
+            alignItems: 'center',
+            justifyContent: 'center',
+          }}>
           <Text
             style={{
-              textAlign: "center",
+              textAlign: 'center',
               paddingBottom: 8,
-              fontSize: tabSize - 24
-            }}
-          >
+              fontSize: Platform.OS === 'android' ? 24 : tabSize - 24,
+            }}>
             {category.symbol}
           </Text>
         </TouchableOpacity>
@@ -101,33 +99,32 @@ const TabBar = ({ theme, activeCategory, onPress, width }) => {
   });
 };
 
-const EmojiCell = ({ emoji, colSize, ...other }) => (
+const EmojiCell = ({emoji, colSize, ...other}) => (
   <TouchableOpacity
     activeOpacity={0.5}
     style={{
       width: colSize,
       height: colSize,
-      alignItems: "center",
-      justifyContent: "center"
+      alignItems: 'center',
+      justifyContent: 'center',
     }}
-    {...other}
-  >
-    <Text style={{ color: "#FFFFFF", fontSize: colSize - 12 }}>
+    {...other}>
+    <Text style={{color: '#FFFFFF', fontSize: colSize - 12}}>
       {charFromEmojiObject(emoji)}
     </Text>
   </TouchableOpacity>
 );
 
-const storage_key = "@react-native-emoji-selector:HISTORY";
+const storage_key = '@react-native-emoji-selector:HISTORY';
 export default class EmojiSelector extends Component {
   state = {
-    searchQuery: "",
+    searchQuery: '',
     category: Categories.people,
     isReady: false,
     history: [],
     emojiList: null,
     colSize: 0,
-    width: 0
+    width: 0,
   };
 
   //
@@ -136,10 +133,10 @@ export default class EmojiSelector extends Component {
   handleTabSelect = category => {
     if (this.state.isReady) {
       if (this.scrollview)
-        this.scrollview.scrollToOffset({ x: 0, y: 0, animated: false });
+        this.scrollview.scrollToOffset({x: 0, y: 0, animated: false});
       this.setState({
-        searchQuery: "",
-        category
+        searchQuery: '',
+        category,
       });
     }
   };
@@ -152,7 +149,7 @@ export default class EmojiSelector extends Component {
   };
 
   handleSearch = searchQuery => {
-    this.setState({ searchQuery });
+    this.setState({searchQuery});
   };
 
   addToHistoryAsync = async emoji => {
@@ -161,21 +158,21 @@ export default class EmojiSelector extends Component {
     let value = [];
     if (!history) {
       // no history
-      let record = Object.assign({}, emoji, { count: 1 });
+      let record = Object.assign({}, emoji, {count: 1});
       value.push(record);
     } else {
       let json = JSON.parse(history);
       if (json.filter(r => r.unified === emoji.unified).length > 0) {
         value = json;
       } else {
-        let record = Object.assign({}, emoji, { count: 1 });
+        let record = Object.assign({}, emoji, {count: 1});
         value = [record, ...json];
       }
     }
 
     AsyncStorage.setItem(storage_key, JSON.stringify(value));
     this.setState({
-      history: value
+      history: value,
     });
   };
 
@@ -183,14 +180,14 @@ export default class EmojiSelector extends Component {
     let result = await AsyncStorage.getItem(storage_key);
     if (result) {
       let history = JSON.parse(result);
-      this.setState({ history });
+      this.setState({history});
     }
   };
 
   //
   //  RENDER METHODS
   //
-  renderEmojiCell = ({ item }) => (
+  renderEmojiCell = ({item}) => (
     <EmojiCell
       key={item.key}
       emoji={item.emoji}
@@ -200,22 +197,23 @@ export default class EmojiSelector extends Component {
   );
 
   returnSectionData() {
-    const { history, emojiList, searchQuery, category } = this.state;
-    let emojiData = (function() {
-        if (category === Categories.all && searchQuery === "") {
+    const {history, emojiList, searchQuery, category} = this.state;
+    let emojiData = (function () {
+      if (category === Categories.all && searchQuery === '') {
         //TODO: OPTIMIZE THIS
         let largeList = [];
         categoryKeys.forEach(c => {
           const name = Categories[c].name;
           const list =
             name === Categories.history.name ? history : emojiList[name];
-          if (c !== "all" && c !== "history") largeList = largeList.concat(list);
+          if (c !== 'all' && c !== 'history')
+            largeList = largeList.concat(list);
         });
 
-        return largeList.map(emoji => ({ key: emoji.unified, emoji }));
+        return largeList.map(emoji => ({key: emoji.unified, emoji}));
       } else {
         let list;
-        const hasSearchQuery = searchQuery !== "";
+        const hasSearchQuery = searchQuery !== '';
         const name = category.name;
         if (hasSearchQuery) {
           const filtered = emoji.filter(e => {
@@ -231,10 +229,12 @@ export default class EmojiSelector extends Component {
         } else {
           list = emojiList[name];
         }
-        return list.map(emoji => ({ key: emoji.unified, emoji }));
+        return list.map(emoji => ({key: emoji.unified, emoji}));
       }
-    })()
-    return this.props.shouldInclude ? emojiData.filter(e => this.props.shouldInclude(e.emoji)) : emojiData
+    })();
+    return this.props.shouldInclude
+      ? emojiData.filter(e => this.props.shouldInclude(e.emoji))
+      : emojiData;
   }
 
   prerenderEmojis(callback) {
@@ -247,16 +247,16 @@ export default class EmojiSelector extends Component {
     this.setState(
       {
         emojiList,
-        colSize: Math.floor(this.state.width / this.props.columns)
+        colSize: Math.floor(this.state.width / this.props.columns),
       },
-      callback
+      callback,
     );
   }
 
-  handleLayout = ({ nativeEvent: { layout } }) => {
-    this.setState({ width: layout.width }, () => {
+  handleLayout = ({nativeEvent: {layout}}) => {
+    this.setState({width: layout.width}, () => {
       this.prerenderEmojis(() => {
-        this.setState({ isReady: true });
+        this.setState({isReady: true});
       });
     });
   };
@@ -265,8 +265,8 @@ export default class EmojiSelector extends Component {
   //  LIFECYCLE METHODS
   //
   componentDidMount() {
-    const { category, showHistory } = this.props;
-    this.setState({ category });
+    const {category, showHistory} = this.props;
+    this.setState({category});
 
     if (showHistory) {
       this.loadHistoryAsync();
@@ -285,7 +285,7 @@ export default class EmojiSelector extends Component {
       ...other
     } = this.props;
 
-    const { category, colSize, isReady, searchQuery } = this.state;
+    const {category, colSize, isReady, searchQuery} = this.state;
 
     const Searchbar = (
       <View style={styles.searchbar_container}>
@@ -302,7 +302,7 @@ export default class EmojiSelector extends Component {
       </View>
     );
 
-    const title = searchQuery !== "" ? "Search Results" : category.name;
+    const title = searchQuery !== '' ? 'Search Results' : category.name;
 
     return (
       <View style={styles.frame} {...other} onLayout={this.handleLayout}>
@@ -316,22 +316,22 @@ export default class EmojiSelector extends Component {
             />
           )}
         </View>
-        <View style={{ flex: 1 }}>
+        <View style={{flex: 1}}>
           {showSearchBar && Searchbar}
           {isReady ? (
-            <View style={{ flex: 1 }}>
+            <View style={{flex: 1}}>
               <View style={styles.container}>
                 {showSectionTitles && (
                   <Text style={styles.sectionHeader}>{title}</Text>
                 )}
                 <FlatList
                   style={styles.scrollview}
-                  contentContainerStyle={{ paddingBottom: colSize }}
+                  contentContainerStyle={{paddingBottom: colSize}}
                   data={this.returnSectionData()}
                   renderItem={this.renderEmojiCell}
                   horizontal={false}
                   numColumns={columns}
-                  keyboardShouldPersistTaps={"always"}
+                  keyboardShouldPersistTaps={'always'}
                   ref={scrollview => (this.scrollview = scrollview)}
                   removeClippedSubviews
                 />
@@ -340,8 +340,8 @@ export default class EmojiSelector extends Component {
           ) : (
             <View style={styles.loader} {...other}>
               <ActivityIndicator
-                size={"large"}
-                color={Platform.OS === "android" ? theme : "#000000"}
+                size={'large'}
+                color={Platform.OS === 'android' ? theme : '#000000'}
               />
             </View>
           )}
@@ -352,36 +352,36 @@ export default class EmojiSelector extends Component {
 }
 
 EmojiSelector.defaultProps = {
-  theme: "#007AFF",
+  theme: '#007AFF',
   category: Categories.all,
   showTabs: true,
   showSearchBar: true,
   showHistory: false,
   showSectionTitles: true,
   columns: 6,
-  placeholder: "Search..."
+  placeholder: 'Search...',
 };
 
 const styles = StyleSheet.create({
   frame: {
     flex: 1,
-    width: "100%"
+    width: '100%',
   },
   loader: {
     flex: 1,
-    alignItems: "center",
-    justifyContent: "center"
+    alignItems: 'center',
+    justifyContent: 'center',
   },
   tabBar: {
-    flexDirection: "row"
+    flexDirection: 'row',
   },
   scrollview: {
-    flex: 1
+    flex: 1,
   },
   searchbar_container: {
-    width: "100%",
+    width: '100%',
     zIndex: 1,
-    backgroundColor: "rgba(255,255,255,0.75)"
+    backgroundColor: 'rgba(255,255,255,0.75)',
   },
   search: {
     ...Platform.select({
@@ -389,21 +389,21 @@ const styles = StyleSheet.create({
         height: 36,
         paddingLeft: 8,
         borderRadius: 10,
-        backgroundColor: "#E5E8E9"
-      }
+        backgroundColor: '#E5E8E9',
+      },
     }),
-    margin: 8
+    margin: 8,
   },
   container: {
     flex: 1,
-    flexWrap: "wrap",
-    flexDirection: "row",
-    alignItems: "flex-start"
+    flexWrap: 'wrap',
+    flexDirection: 'row',
+    alignItems: 'flex-start',
   },
   sectionHeader: {
     margin: 8,
     fontSize: 17,
-    width: "100%",
-    color: "#8F8F8F"
-  }
+    width: '100%',
+    color: '#8F8F8F',
+  },
 });
